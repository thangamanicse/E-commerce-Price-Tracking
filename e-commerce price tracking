{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f1e874e8-916e-4afa-a69d-07cbb2b5e838",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Price not found for Flipkart Product\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import smtplib\n",
    "from email.mime.text import MIMEText\n",
    "from email.mime.multipart import MIMEMultipart\n",
    "from datetime import datetime\n",
    "\n",
    "def get_amazon_price(url):\n",
    "    headers = {\n",
    "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n",
    "    }\n",
    "    \n",
    "    response = requests.get(url, headers=headers)\n",
    "    soup = BeautifulSoup(response.content, 'html.parser')\n",
    "    \n",
    "    price = soup.find(id='priceblock_ourprice')\n",
    "    if price is None:\n",
    "        price = soup.find(id='priceblock_dealprice')\n",
    "    \n",
    "    if price:\n",
    "        return float(price.get_text(strip=True).replace('$', '').replace(',', ''))\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "def get_flipkart_price(url):\n",
    "    headers = {\n",
    "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n",
    "    }\n",
    "    \n",
    "    response = requests.get(url, headers=headers)\n",
    "    soup = BeautifulSoup(response.content, 'html.parser')\n",
    "    \n",
    "    price = soup.find('div', {'class': '_30jeq3'})\n",
    "    if price is None:\n",
    "        price = soup.find('div', {'class': '_1_WHN1'})\n",
    "    \n",
    "    if price:\n",
    "        return float(price.get_text(strip=True).replace('â‚¹', '').replace(',', ''))\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "def check_price_change(product, current_price, file_name='prices.csv'):\n",
    "    try:\n",
    "        df = pd.read_csv(file_name)\n",
    "    except FileNotFoundError:\n",
    "        df = pd.DataFrame(columns=['Product', 'Date', 'Price'])\n",
    "    \n",
    "    today = datetime.now().strftime('%Y-%m-%d')\n",
    "    if product in df['Product'].values:\n",
    "        df.loc[df['Product'] == product, 'Price'] = current_price\n",
    "        df.loc[df['Product'] == product, 'Date'] = today\n",
    "    else:\n",
    "        df = df.append({'Product': product, 'Date': today, 'Price': current_price}, ignore_index=True)\n",
    "    \n",
    "    df.to_csv(file_name, index=False)\n",
    "    \n",
    "def send_email_notification(subject, body, to_email, from_email, from_password):\n",
    "    msg = MIMEMultipart()\n",
    "    msg['From'] = from_email\n",
    "    msg['To'] = to_email\n",
    "    msg['Subject'] = subject\n",
    "    \n",
    "    msg.attach(MIMEText(body, 'plain'))\n",
    "    \n",
    "    with smtplib.SMTP('smtp.gmail.com', 587) as server:\n",
    "        server.starttls()\n",
    "        server.login(from_email, from_password)\n",
    "        text = msg.as_string()\n",
    "        server.sendmail(from_email, to_email, text)\n",
    "\n",
    "# Example usage\n",
    "if __name__ == \"__main__\":\n",
    "    products = {\n",
    "        'Amazon Product': 'https://www.amazon.com/dp/your-product-id',\n",
    "        'Flipkart Product': 'https://www.flipkart.com/your-product-id'\n",
    "    }\n",
    "    \n",
    "    email_details = {\n",
    "        'to_email': 'recipient@example.com',\n",
    "        'from_email': 'your-email@example.com',\n",
    "        'from_password': 'your-email-password'\n",
    "    }\n",
    "    \n",
    "    for product, url in products.items():\n",
    "        if 'amazon' in url:\n",
    "            price = get_amazon_price(url)\n",
    "        elif 'flipkart' in url:\n",
    "            price = get_flipkart_price(url)\n",
    "        else:\n",
    "            continue\n",
    "        \n",
    "        if price is not None:\n",
    "            check_price_change(product, price)\n",
    "            \n",
    "            # You can customize the condition for sending email notifications\n",
    "            if price < 1000:  # Example condition\n",
    "                subject = f'Price Alert for {product}'\n",
    "                body = f'The price of {product} has dropped to {price}. Check it out here: {url}'\n",
    "                send_email_notification(subject, body, **email_details)\n",
    "            print(f'The current price of {product} is: {price}')\n",
    "        else:\n",
    "            print(f'Price not found for {product}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2746e4d2-0049-4129-a3b5-9f4c69b34260",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67753527-de76-44f7-a11b-b3eb14cade6e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
